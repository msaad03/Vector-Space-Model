/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assignment2_ir;

import static assignment2_ir.Assignment2_IR.alpha;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author M.Saad
 */
public class VectorSpaceGUI extends javax.swing.JFrame {

    /**
     * Creates new form VectorSpaceGUI
     */
    public VectorSpaceGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jText1 = new javax.swing.JTextField();
        jButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setToolTipText("");

        jText1.setBackground(new java.awt.Color(0, 0, 0));
        jText1.setForeground(new java.awt.Color(255, 255, 255));
        jText1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jText1ActionPerformed(evt);
            }
        });

        jButton.setBackground(new java.awt.Color(0, 0, 0));
        jButton.setForeground(new java.awt.Color(255, 255, 255));
        jButton.setText("Search");
        jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActionPerformed(evt);
            }
        });

        jTextArea.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea.setColumns(20);
        jTextArea.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea.setRows(5);
        jScrollPane1.setViewportView(jTextArea);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setText("VECTOR SPACE MODEL");
        jLabel1.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(44, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jText1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jText1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActionPerformed
        // TODO add your handling code here:
        
        jTextArea.setText("");
        
        Scanner obj = new Scanner(System.in);
        
        int count = new File("ShortStories\\").list().length;
                
        
        String query = jText1.getText();
        
        File f = new File("tfidf.txt");
        File f1 = new File("idf.txt");
        if(f.exists() && !f.isDirectory() && f1.exists() && !f1.isDirectory()) 
        {
            TreeMap<String,ArrayList<Double>> tfidfMap = new TreeMap<String,ArrayList<Double>>();

            FileReader in=null;
                    try {
                        in = new FileReader("tfidf.txt");
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(VectorSpaceGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
            BufferedReader br = new BufferedReader(in);
            String line ;
            String line1;
            String afterTokenArray[];
            double arr;
       
            
                    try {
                        while ((line = br.readLine()) != null)
                        {
                            line1 =line.replaceAll("\\&", "").replaceAll("\\â€˜", "").replaceAll("th", "").replaceAll("\\$", "").replaceAll("\\*", "").replaceAll("\\'", "").replaceAll("\\,", "").replaceAll("\\?", "").replaceAll("\\!", "").replaceAll("\\;", "").replaceAll("\\-", "").replaceAll("\\[", "").replaceAll("\\]", "").replaceAll("<", "").replaceAll(">", "").replaceAll("_", "").replaceAll("\"", "").replaceAll(":", "").replaceAll("\\(", "").replaceAll("\\)", "");
                            
                            afterTokenArray = line1.split("\\s+");
                            
                            ArrayList<Double> list = new ArrayList<Double>();
                            for(int j=1;j<afterTokenArray.length;j++)
                            {
                                arr=Double.parseDouble(afterTokenArray[j]);
                                
                                list.add(arr);
                            }
                            
                            tfidfMap.put(afterTokenArray[0], list);
                            
                        }       } catch (IOException ex) {
                        Logger.getLogger(VectorSpaceGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
            
        double docMagnitude [] = new double[count];
        Arrays.fill(docMagnitude, 0.0);
        
        for(int k=0; k< count; k++)
        {
            for (Map.Entry<String, ArrayList<Double>> entry : tfidfMap.entrySet()) 
            {
                docMagnitude[k] += Math.pow(entry.getValue().get(k),2);
            }
            
            docMagnitude[k] = Math.sqrt(docMagnitude[k]);
        }
            
            TreeMap<String,Double> idfMap = new TreeMap<String,Double>();

                    try {
                        in = new FileReader("idf.txt");
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(VectorSpaceGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
            br = new BufferedReader(in);
            double arr1;
            
                    try {
                        while ((line = br.readLine()) != null)
                        {
                            line1 =line.replaceAll("\\&", "").replaceAll("\\â€˜", "").replaceAll("th", "").replaceAll("\\$", "").replaceAll("\\*", "").replaceAll("\\'", "").replaceAll("\\,", "").replaceAll("\\?", "").replaceAll("\\!", "").replaceAll("\\;", "").replaceAll("\\-", "").replaceAll("\\[", "").replaceAll("\\]", "").replaceAll("<", "").replaceAll(">", "").replaceAll("_", "").replaceAll("\"", "").replaceAll(":", "").replaceAll("\\(", "").replaceAll("\\)", "");
                            
                            afterTokenArray = line1.split("\\s+");
                            
                            arr1=Double.parseDouble(afterTokenArray[1]);
                            
                            idfMap.put(afterTokenArray[0], arr1);
                            
                        }       } catch (IOException ex) {
                        Logger.getLogger(VectorSpaceGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
            //Query Processing
//        
         TreeMap<String,Integer> querytfMap = new TreeMap<String,Integer>();
         
         TreeMap<String,Double> querylogtfMap = new TreeMap<String,Double>();       
         
         TreeMap<String,ArrayList<Integer>> queryMap = new TreeMap<String,ArrayList<Integer>>();
         
         TreeMap <String,Double> querytfidfMap = new TreeMap<String, Double>();
         
         query = query.toLowerCase();
         
         query =query.replaceAll("\\.", "").replaceAll("\\â€”", "").replaceAll("\\â€™", "").replaceAll("\\&", "").replaceAll("\\â€˜", "").replaceAll("\\â€™", "").replaceAll("th", "").replaceAll("\\$", "").replaceAll("\\*", "").replaceAll("\\'", "").replaceAll("\\,", "").replaceAll("\\?", "").replaceAll("\\!", "").replaceAll("\\;", "").replaceAll("\\-", "").replaceAll("\\[", "").replaceAll("\\]", "").replaceAll("<", "").replaceAll(">", "").replaceAll("_", "").replaceAll("\"", "").replaceAll(":", "").replaceAll("\\(", "").replaceAll("\\)", "").replaceAll("\\/", "");
        
         String [] simpleQuery;
        
         simpleQuery = query.split(" ");
         
            for (Map.Entry<String, ArrayList<Double>> entry : tfidfMap.entrySet()) 
            {
                querytfMap.put(entry.getKey(), 0);
            }
            int check = 0;
            for(int ii=0; ii<simpleQuery.length; ii++)
            {
                if(querytfMap.containsKey(simpleQuery[ii]))
                {
                    int tf = querytfMap.get(simpleQuery[ii]);
                    tf++;
                    
                    querytfMap.put(simpleQuery[ii], tf);
                }
                
                else
                {
                    check++;
                    continue;
                }
                
            }
            
            if(check == simpleQuery.length)
            {
                 return;
            }
             
            for (Map.Entry<String,ArrayList<Double>> entry : tfidfMap.entrySet()) 
            {
                int tf = querytfMap.get(entry.getKey());
                
                double tf1 = (double)tf;
                
                if(tf1 == 0.0)
                {
                    querylogtfMap.put(entry.getKey(), 0.0);
                }
                
                else
                {
                    querylogtfMap.put(entry.getKey(), (1+ Math.log10(tf1)));
                }
                
            }
            
            for (Map.Entry<String, Double> entry : querylogtfMap.entrySet()) 
            {
                double idf = idfMap.get(entry.getKey());
                double tf = querylogtfMap.get(entry.getKey());
                
                querytfidfMap.put(entry.getKey(), tf*idf);
                
            }
            double queryMagnitude=0.0;
            
            for (Map.Entry<String, Double> entry : querytfidfMap.entrySet()) 
            {
                queryMagnitude += Math.pow(entry.getValue(),2);
            }
            
            queryMagnitude = Math.sqrt(queryMagnitude);
      
           // System.out.println(queryMagnitude);
            class Rank 
            {
                public double rank;
                public int id;;
            }
            
            class sorted implements Comparator<Rank>
            {

                @Override
                public int compare(Rank o1, Rank o2) 
                {
                    if(o1.rank > o2.rank)
                        return -1;
                    
                    if(o1.rank < o2.rank)
                        return 1;
                    
                    return 0;
                    
                    
                }
                
            }
            
            Rank ranks[] = new Rank[count];
            
            double numerator=0;
            
            for(int k=0; k<count; k++)
            {
                numerator=0;
                for (Map.Entry<String, Double> entry : querytfidfMap.entrySet()) 
                {
                    numerator += ( ( tfidfMap.get(entry.getKey()).get(k) ) * ( querytfidfMap.get(entry.getKey()) ) );
                }
                
                ranks[k] = new Rank();
                ranks[k].rank = numerator / (queryMagnitude * docMagnitude[k]);
                ranks[k].id = k+1;
                
            }
            
            Arrays.sort(ranks, new  sorted());
            for(int kk=0;kk<ranks.length;kk++)
            {
                if(ranks[kk].rank > alpha)
                {
                    jTextArea.append("Doc " + ranks[kk].id + " - " + ranks[kk].rank + "\n");
                }
            }
            
        }
        
        else
        {
            try {
                Assignment2_IR.index(query,jTextArea);
            } catch (IOException ex) {
                Logger.getLogger(VectorSpaceGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    

    }//GEN-LAST:event_jButtonActionPerformed

    private void jText1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jText1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jText1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VectorSpaceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VectorSpaceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VectorSpaceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VectorSpaceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VectorSpaceGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jText1;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
